import pandas as pd
import numpy as np
from faker import Faker
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle, Image
import matplotlib.pyplot as plt
import io
from google.colab import files

fake = Faker('es_ES')

class SistemaResiduos:
    def __init__(self):
        self.residuos = []

    def registrar_residuo(self):
        print("\nRegistrar nuevo residuo:")
        nombre = input("Nombre: ").strip()
        tipos = ['orgánico', 'inorgánico', 'peligroso', 'reciclable']
        while True:
            tipo = input(f"Tipo ({', '.join(tipos)}): ").strip().lower()
            if tipo in tipos:
                break
            print("Tipo inválido, intente de nuevo.")
        tratamientos = ['reciclaje', 'incineración', 'compostaje', 'relleno sanitario']
        while True:
            tratamiento = input(f"Tratamiento ({', '.join(tratamientos)}): ").strip().lower()
            if tratamiento in tratamientos:
                break
            print("Tratamiento inválido, intente de nuevo.")
        while True:
            try:
                peso = float(input("Peso en kilogramos: "))
                if peso > 0:
                    break
                else:
                    print("Peso debe ser positivo.")
            except:
                print("Ingrese un número válido.")
        while True:
            try:
                recuperacion = float(input("Porcentaje de recuperación estimado (0-100): "))
                if 0 <= recuperacion <= 100:
                    break
                else:
                    print("Debe estar entre 0 y 100.")
            except:
                print("Ingrese un número válido.")
        self.residuos.append({
            'nombre': nombre,
            'tipo': tipo,
            'tratamiento': tratamiento,
            'peso': peso,
            'recuperacion': recuperacion
        })
        print("Residuo registrado correctamente.")

    def listar_por_tipo(self):
        if not self.residuos:
            print("No hay residuos registrados.")
            return
        tipos = set(r['tipo'] for r in self.residuos)
        print(f"Tipos disponibles: {', '.join(tipos)}")
        tipo = input("Ingrese el tipo para listar: ").strip().lower()
        filtrados = [r for r in self.residuos if r['tipo'] == tipo]
        if not filtrados:
            print(f"No hay residuos del tipo '{tipo}'.")
            return
        print(f"\nResiduos tipo '{tipo}':")
        for r in filtrados:
            print(f"- {r['nombre']}, Tratamiento: {r['tratamiento']}, Peso: {r['peso']} kg, Recuperación: {r['recuperacion']}%")

    def listar_por_tratamiento(self):
        if not self.residuos:
            print("No hay residuos registrados.")
            return
        tratamientos = set(r['tratamiento'] for r in self.residuos)
        print(f"Tratamientos disponibles: {', '.join(tratamientos)}")
        tratamiento = input("Ingrese el tratamiento para listar: ").strip().lower()
        filtrados = [r for r in self.residuos if r['tratamiento'] == tratamiento]
        if not filtrados:
            print(f"No hay residuos con tratamiento '{tratamiento}'.")
            return
        print(f"\nResiduos con tratamiento '{tratamiento}':")
        for r in filtrados:
            print(f"- {r['nombre']}, Tipo: {r['tipo']}, Peso: {r['peso']} kg, Recuperación: {r['recuperacion']}%")

    def resumen_estadistico(self):
        if not self.residuos:
            print("No hay residuos registrados.")
            return {}
        df = pd.DataFrame(self.residuos)
        resumen = {
            'total_por_tipo': df.groupby('tipo')['peso'].sum().to_dict(),
            'promedio_peso_por_tipo': df.groupby('tipo')['peso'].mean().to_dict(),
            'promedio_recuperacion_por_tratamiento': df.groupby('tratamiento')['recuperacion'].mean().to_dict()
        }
        return resumen

    def mostrar_resumen(self):
        resumen = self.resumen_estadistico()
        if not resumen:
            return
        print("\nResumen Estadístico:")
        print("Total de residuos por tipo (kg):")
        for k, v in resumen['total_por_tipo'].items():
            print(f"  {k}: {v:.2f}")
        print("Promedio de peso por tipo (kg):")
        for k, v in resumen['promedio_peso_por_tipo'].items():
            print(f"  {k}: {v:.2f}")
        print("Promedio de recuperación por tratamiento (%):")
        for k, v in resumen['promedio_recuperacion_por_tratamiento'].items():
            print(f"  {k}: {v:.2f}")

    def exportar_resumen_txt(self, filename="resumen_residuos.txt"):
        resumen = self.resumen_estadistico()
        if not resumen:
            print("No hay datos para exportar.")
            return
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("Resumen Estadístico de Residuos\n")
            f.write(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("Total de residuos por tipo (kg):\n")
            for k, v in resumen['total_por_tipo'].items():
                f.write(f"  {k}: {v:.2f}\n")
            f.write("\nPromedio de peso por tipo (kg):\n")
            for k, v in resumen['promedio_peso_por_tipo'].items():
                f.write(f"  {k}: {v:.2f}\n")
            f.write("\nPromedio de recuperación por tratamiento (%):\n")
            for k, v in resumen['promedio_recuperacion_por_tratamiento'].items():
                f.write(f"  {k}: {v:.2f}\n")
        print(f"Archivo TXT generado: {filename}")
        files.download(filename)

    def exportar_resumen_pdf(self, filename="resumen_residuos.pdf"):
        resumen = self.resumen_estadistico()
        if not resumen:
            print("No hay datos para exportar.")
            return
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 50, "Resumen Estadístico de Residuos")
        c.setFont("Helvetica", 10)
        c.drawString(50, height - 70, f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        y = height - 100
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "Total de residuos por tipo (kg):")
        y -= 20
        c.setFont("Helvetica", 10)
        for k, v in resumen['total_por_tipo'].items():
            c.drawString(60, y, f"{k}: {v:.2f}")
            y -= 15

        y -= 10
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "Promedio de peso por tipo (kg):")
        y -= 20
        c.setFont("Helvetica", 10)
        for k, v in resumen['promedio_peso_por_tipo'].items():
            c.drawString(60, y, f"{k}: {v:.2f}")
            y -= 15

        y -= 10
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "Promedio de recuperación por tratamiento (%):")
        y -= 20
        c.setFont("Helvetica", 10)
        for k, v in resumen['promedio_recuperacion_por_tratamiento'].items():
            c.drawString(60, y, f"{k}: {v:.2f}")
            y -= 15

        c.save()
        print(f"Archivo PDF generado: {filename}")
        files.download(filename)

    def generar_csv_simulado(self, filename="residuos_simulados.csv", n=200):
        tipos = ['orgánico', 'inorgánico', 'peligroso', 'reciclable']
        tratamientos = ['reciclaje', 'incineración', 'compostaje', 'relleno sanitario']
        self.residuos = []
        for i in range(n):
            nombre = f"Residuo_{i+1}_{fake.word()}"
            tipo = np.random.choice(tipos)
            tratamiento = np.random.choice(tratamientos)
            peso = round(np.random.uniform(0.1, 50), 2)
            recuperacion = round(np.random.uniform(0, 100), 2)
            self.residuos.append({
                'nombre': nombre,
                'tipo': tipo,
                'tratamiento': tratamiento,
                'peso': peso,
                'recuperacion': recuperacion
            })
        df = pd.DataFrame(self.residuos)
        df.to_csv(filename, index=False)
        print(f"Archivo CSV simulado generado: {filename}")
        files.download(filename)

    def cargar_desde_csv(self, filename):
        try:
            df = pd.read_csv(filename)
            for _, row in df.iterrows():
                # Validar datos mínimos
                if all(k in row for k in ['nombre', 'tipo', 'tratamiento', 'peso', 'recuperacion']):
                    self.residuos.append({
                        'nombre': str(row['nombre']),
                        'tipo': str(row['tipo']).lower(),
                        'tratamiento': str(row['tratamiento']).lower(),
                        'peso': float(row['peso']),
                        'recuperacion': float(row['recuperacion'])
                    })
            print(f"Datos cargados desde {filename}. Total residuos: {len(self.residuos)}")
        except Exception as e:
            print(f"Error al cargar CSV: {e}")

    def generar_logo_ia(self):
        fig, ax = plt.subplots(figsize=(2, 2))
        ax.plot(np.random.rand(10), np.random.rand(10), 'o-', color='green')
        ax.set_axis_off()
        buf = io.BytesIO()
        plt.savefig(buf, format='PNG', bbox_inches='tight', transparent=True)
        plt.close(fig)
        buf.seek(0)
        return buf

    def exportar_reporte_pdf(self, filename="reporte_profesional.pdf"):
        if not self.residuos:
            print("No hay residuos para generar reporte.")
            return
        c = canvas.Canvas(filename, pagesize=letter)
        width, height = letter

        # Logo IA
        logo_buf = self.generar_logo_ia()
        img = Image(logo_buf)
        img.drawHeight = 50
        img.drawWidth = 50
        img.wrapOn(c, width, height)
        img.drawOn(c, 50, height - 80)

        # Encabezado con fecha
        c.setFont("Helvetica-Bold", 16)
        c.drawString(110, height - 50, "Reporte Profesional de Residuos")
        c.setFont("Helvetica", 10)
        c.drawString(110, height - 70, f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # Tabla con datos
        data = [['Nombre', 'Tipo', 'Tratamiento', 'Peso (kg)', 'Recuperación (%)']]
        for r in self.residuos:
            data.append([r['nombre'], r['tipo'], r['tratamiento'], f"{r['peso']:.2f}", f"{r['recuperacion']:.2f}"])

        table = Table(data, colWidths=[120, 80, 110, 70, 90])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.green),
            ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
            ('ALIGN',(3,1),(-1,-1),'RIGHT'),
            ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0,0), (-1,0), 12),
            ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ]))
        w, h = table.wrapOn(c, width - 100, height - 150)
        table.drawOn(c, 50, height - 150 - h)

        # Pie de página con numeración
        c.setFont("Helvetica", 9)
        c.drawString(width - 100, 30, "Página 1")

        c.save()
        print(f"Archivo PDF generado: {filename}")
        files.download(filename)

def menu():
    sistema = SistemaResiduos()
    while True:
        print("\n--- Menú Sistema de Gestión de Residuos ---")
        print("1. Registrar residuo manualmente")
        print("2. Listar residuos por tipo")
        print("3. Listar residuos por método de tratamiento")
        print("4. Mostrar resumen estadístico")
        print("5. Exportar resumen a TXT")
        print("6. Exportar resumen a PDF")
        print("7. Generar archivo CSV con residuos simulados")
        print("8. Cargar residuos desde archivo CSV")
        print("9. Exportar reporte profesional en PDF")
        print("0. Salir")
        opcion = input("Seleccione una opción: ").strip()

        if opcion == '1':
            sistema.registrar_residuo()
        elif opcion == '2':
            sistema.listar_por_tipo()
        elif opcion == '3':
            sistema.listar_por_tratamiento()
        elif opcion == '4':
            sistema.mostrar_resumen()
        elif opcion == '5':
            sistema.exportar_resumen_txt()
        elif opcion == '6':
            sistema.exportar_resumen_pdf()
        elif opcion == '7':
            n = input("¿Cuántos residuos simulados generar? (default 200): ").strip()
            n = int(n) if n.isdigit() else 200
            sistema.generar_csv_simulado(n=n)
        elif opcion == '8':
            print("Por favor, suba el archivo CSV:")
            uploaded = files.upload()
            if uploaded:
                filename = list(uploaded.keys())[0]
                sistema.cargar_desde_csv(filename)
        elif opcion == '9':
            sistema.exportar_reporte_pdf()
        elif opcion == '0':
            print("Saliendo del sistema.")
            break
        else:
            print("Opción inválida, intente de nuevo.")

menu()
